$(function () {
    $('.nav-link').on('click', function () {
        $('.nav-li').removeClass('select');
        var thisElement = $(this);
        if (thisElement.next('.subnav-ul').is(':hidden')) {
            thisElement.parent('.nav-li').addClass('select').siblings().find('.subnav-ul').slideUp(200);
            thisElement.next('.subnav-ul').slideDown(200);

        } else {
            thisElement.parent('.nav-li').removeClass('select');
            thisElement.next('.subnav-ul').slideUp(200);
        }
    });

    $('.sai-link').on('click', function () {
        var searchBox = $('.search-w');
        if (searchBox.hasClass('hide')) {
            $(this).text('↑隐藏更多选项');
            searchBox.removeClass('hide');
        } else {
            $(this).text('↓显示更多选项');
            searchBox.addClass('hide');
        }
    });

    $('.menu-icon').on('click', function () {
        $('.menu-box').slideToggle(300);
    })
});

/**
 * The application module.
 *
 * @author Iritchie.ren
 * @version 1.0
 */
var app = angular.module('app', [], function () {
}).run(function ($rootScope, $http) {
    /**
     * The global logout scope function.
     */
    $rootScope.logout = function () {
        if (confirm('是否确认退出登录?')) {
            $http.post('/api/account/logout').success(function () {
                location.href = '/login';
            });
        }
    };

    /**
     * The global handler function for changing branch group of the filter.
     *
     * @param {object} filter the filter.
     */
    $rootScope.changeFilterGroup = function (filter) {
        delete filter.branchId;
    };

    /**
     * Cancels editing and shows the list table.
     */
    $rootScope.cancelEdit = function () {
        $('.add-content').hide();
        $('.model-list-box').show();
    };
});

/**
 * The HTTP interceptor.
 *
 * @author Iritchie.ren
 * @version 1.0
 */
app.factory('httpInterceptor', ['$q', function ($q) {

    var UNEXPECTED_ERROR_CODES = ['01', '02'];

    return {

        /**
         * Intercepts the HTTP request.
         *
         * @param {object} config the request config.
         * @returns {object} the request config with CSRF header and token generated by Spring Security set.
         */
        request: function (config) {
            if (config.method != 'GET') {
                config.headers[$("meta[name='_csrf_header']").attr("content")] = $("meta[name='_csrf']").attr("content");
            }
            return config;
        },

        /**
         * Intercepts the HTTP response.
         *
         * <p>
         *     If the response data code is neither not 0 (OK) 102 (Duplicate) or if the status is not 200,
         *     returns a rejected deferred. Otherwise returns the original response.
         * </p>
         *
         * @param {object} response the HTTP response.
         * @returns {object} If the response data code is neither not 0 (OK) 102 (Duplicate) or if the status is not 200,
         * returns a rejected deferred. Otherwise returns the original response.
         */
        response: function (response) {
            if (response.status != 200) {
                console.error(response);
                return $q.reject(response);
            }
            if (response.data.code != '0' && UNEXPECTED_ERROR_CODES.indexOf(response.data.code) != -1) {
                console.error(response.data.message);
                return $q.reject(response);
            }
            return response;
        }
    };
}]);

app.config(['$httpProvider', function ($httpProvider) {
    // Registers the HTTP interceptor.
    $httpProvider.interceptors.push('httpInterceptor');
}]);

/**
 * The service for entity search.
 *
 * @author Iritchie.ren
 * @version 1.0
 */
var HelperService = app.factory('HelperService', ['$http', function ($http) {

    var PAGE_SIZE = 10;

    var MAX_IMG_SIZE = 204800;

    return {
        /**
         * The default page size.
         *
         * @const
         * @type {number}
         */
        PAGE_SIZE: PAGE_SIZE,

        /**
         * Uploads an image file.
         *
         * @param {string} model the model that the image is for.
         * @param {HTMLInputElement} input the HTML file input element
         * @param {function} callback the callback function.
         * If success, the URL path of the saved image is passed to the callback.
         */
        uploadImage: function (model, input, callback) {
            var self = this;
            if (input.files.length == 0) {
                return callback();
            }
            var file = input.files[0];
            if (file.size > MAX_IMG_SIZE) {
                self.showMessage("图片文件不能大于200KB");
                return callback();
            }
            var formData = new FormData();
            formData.append('model', model);
            formData.append('file', file);
            var headers = {};
            headers[$("meta[name='_csrf_header']").attr("content")] = $("meta[name='_csrf']").attr("content");
            $.ajax({
                url: '/api/file-upload',
                type: 'POST',
                processData: false,
                contentType: false,
                headers: headers,
                data: formData,
                success: function (result) {
                    if (result.code != '0') {
                        self.showMessage("图片上传失败，请重试");
                        return callback();
                    }
                    callback(result.data);
                },
                error: function () {
                    self.showMessage("图片上传失败，请重试");
                    callback();
                }
            });
        },

        /**
         * Shows message.
         *
         * @param {string} message the message to show.
         */
        showMessage: function (message) {
            alert(message);
        },

        /**
         * Gets the request parameter by name.
         *
         * @param {string} name the parameter name.
         * @returns {String} the parameter value, null if not present.
         */
        getRequestParam: function (name) {
            if (name = (new RegExp('[?&]' + encodeURIComponent(name) + '=([^&]*)')).exec(location.search)) {
                return decodeURIComponent(name[1]);
            }
            return null;
        },

        /**
         * Replaces the element the list whose id equals to the id of given item.
         *
         * @param {Array} list the array list.
         * @param {object} item the item.
         */
        replaceListItem: function (list, item) {
            for (var i in list) {
                if (list[i].id == item.id) {
                    list.splice(i, 1, item);
                    return;
                }
            }
        },

        /**
         * Sorts the item of the array list by displayOrder property and sets reformat all display order.
         *
         * @param {Array} list the array to sort.
         */
        sortByDisplayOrder: function (list) {
            list.sort(function (item1, item2) {
                return item1.displayOrder - item2.displayOrder;
            });
            for (var i = 0; i < list.length; i++) {
                list[i].displayOrder = i + 1;
            }
        },

        /**
         * Gets the managed branches and groups of the current authenticated account.
         *
         * @param {object} $scope the angular $scope variable.
         * @param {function} callback the callback function.
         */
        getManagedBranchesAndGroups: function ($scope, callback) {
            $http.get('/api/account/managed-branches-and-groups').success(function (result) {
                $scope.filterGroups = result.data.groups;
                $scope.filterBranches = result.data.branches;
                if ($scope.filterGroups.length == 1) {
                    $scope.filter.groupId = $scope.filterGroups[0].id;
                }
                if (result.data.branches.length == 1) {
                    $scope.filter.branchId = $scope.filterBranches[0].id;
                }
                callback();
            });
        },

        changeStatus: function (url, model, enabled, modelName, callback) {
            if (confirm('是否确认' + (enabled ? '启用' : '停用') + '此' + modelName + '？')) {
                model.enabled = enabled;
                $http.post(url, model).error(function () {
                    model.enabled = !enabled;
                    if (callback) {
                        callback();
                    }
                }).success(function (result) {
                    if (callback) {
                        callback(result);
                    }
                });
            }
        },

        /**
         * Creates the search URL with parameters constructed by the search filter.
         *
         * @param {string} url the URL.
         * @param {object} filter the search filter.
         * @return {string} the search URL with search parameters.
         */
        createSearchUrl: function (url, filter) {
            if (filter && Object.getOwnPropertyNames(filter).length > 0) {
                url += '?';
                for (var key in filter) {
                    if (filter[key]) {
                        url += key + '=';
                        if (filter[key] instanceof Array) {
                            for (var i in filter[key]) {
                                url += encodeURIComponent(filter[key][i]);
                                if (i < filter[key].length - 1) {
                                    url += ',';
                                }
                            }
                        } else {
                            url += encodeURIComponent(filter[key]);
                        }
                        url += '&';
                    }
                }
                return url.substring(0, url.length - 1)
            }
            return url;
        },

        /**
         * Performs search and sets the content of the HTML container of the pagers according to the result.
         *
         * The final request URL will be constructed according to the properties of the search filter
         * by the following algorithm:
         * <ul>
         *     <li>Iterate the properties in the filter</li>
         *     <li>If the property is an <code>Array</code>, request parameter will be <code>'key=value1,value2...'</code></li>
         *     <li>Otherwise set the request parameter to <code>'key=value'</code></li>
         *     <li>Appends all parameters to the end of the URL following <code>'?'</code></li>
         * </ul>
         *
         * @param {string} url the request URL.
         * @param {object} filter the search filter.
         * @param {function} pageHandler the handler on pager changed, optional. If not provided, the pages will not be generated.
         * @param {function} callback the callback function, optional.
         *
         * @return {object} the http promise.
         */
        search: function (url, filter, pageHandler, callback) {
            url = this.createSearchUrl(url, filter);

            return $http.get(url).success(function (result) {
                if (result.code != 0) {
                    return;
                }
                var searchResult = result.data;
                if (pageHandler) {
                    this.renderPagers(pageHandler, searchResult);
                }
                if (callback) {
                    callback(searchResult);
                }
            }.bind(this));
        },

        /**
         * Renders the pagers into HTML.
         *
         * @param {function} pageHandler the handler on pager changed.
         * @param {object} searchResult the search result.
         */
        renderPagers: function (pageHandler, searchResult) {
            var pageList = $('.page-clumn').empty();
            if (searchResult.totalPages > 1) {
                if (searchResult.page > 1) {
                    pageList.append('<a href="#" data-page="1">首页</a>');
                    pageList.append('<a href="#" data-page="' + (searchResult.page - 1) + '"><</a>');
                }
                pageList.append('<span class="page-txt">' + searchResult.page + ' / '
                    + searchResult.totalPages + '</span>')

                if (searchResult.page < searchResult.totalPages) {
                    pageList.append('<a href="#" data-page="' + (searchResult.page + 1) + '">></a>');
                    pageList.append('<a href="#" data-page="' + searchResult.totalPages + '">尾页</a>');
                }
                pageList.append('<input id="pagers-to-page" type="text" class="page-input" placeholder="输入页码..." />');
                pageList.append('<a href="#">跳转</a>');
                pageList.find('a').click(function (e) {
                    e.preventDefault();
                    var thisBtn = $(this);
                    var page = parseInt(thisBtn.attr('data-page') || $('#pagers-to-page').val());
                    if (page) {
                        pageHandler(page);
                    }
                });
            }
        },

        /**
         * Formats the date.
         *
         * @param {string||number} dateValue the string/number value representing the date.
         * @param {Boolean} excludeTime the value indicates if the time portion of the date should be excluded, optional.
         * @returns {string} the resulted string.
         */
        formatDate: function (dateValue, excludeTime) {
            if (!dateValue) {
                return '';
            }
            var date = new Date(dateValue);
            var result = date.getFullYear() + '-' + this.getDoubleNumberString(date.getMonth() + 1) + '-'
                + this.getDoubleNumberString(date.getDate());
            if (!excludeTime) {
                result += ' ' + this.getDoubleNumberString(date.getHours())
                    + ':' + this.getDoubleNumberString(date.getMinutes());
            }
            return result;
        },

        /**
         * Gets the double length string according to the given number.
         *
         * @param {number} number the number.
         * @returns {string} the resulted string.
         */
        getDoubleNumberString: function (number) {
            return number >= 10 ? number.toString() : '0' + number;
        },

        /**
         * Copies the primitive fields of the object to a new object.
         *
         * @param {object} obj the object to copy.
         * @returns {object} the new object.
         */
        copySimpleObject: function (obj) {
            if (!obj) {
                return null;
            }
            var result = {};
            var keys = Object.getOwnPropertyNames(obj);
            for (var i in keys) {
                var key = keys[i];
                result[key] = obj[key];
            }
            return result;
        },

        tipErrorMessage: function ($scope, message) {
            $scope.tipMessage = message;
            $('.fail-tips').show().animate({'opacity': 1}, 300).delay(3000).animate({'opacity': 0}, 300, function () {
                $(this).hide()
            });
        },

        tipSuccessMessage: function ($scope, message) {
            $scope.tipMessage = message;
            $('.success-tips').show().animate({'opacity': 1}, 300).delay(3000).animate({'opacity': 0}, 300, function () {
                $(this).hide()
            });
        }
    }
}]);